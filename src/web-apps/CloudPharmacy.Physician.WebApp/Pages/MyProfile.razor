@page "/myprofile"
@using CloudPharmacy.Physician.WebApp.Application.Model
@using Microsoft.Identity.Web
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@inject CloudPharmacy.Physician.WebApp.Infrastructure.API.IPhysicianAPI PhysicianAPI
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>My profile</PageTitle>
<RadzenNotification />
<AuthorizeView Context="Auth" Policy="Physician">
    <Authorized>
        <h1>My profile</h1>
        <div class="col-md-12 d-flex align-items-end justify-content-center">
            <div class="col-md-4 p-3">
                <RadzenCard Visible=@_isLoadingProfile>
                    <RadzenProgressBar Visible=@_isLoadingProfile Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                </RadzenCard>
            </div>
        </div>

        <RadzenFieldset Text="Profile details" Visible=@_isProfileLoaded>
            <div class="row">
                <div class="col-xl-6">
                    <p>
                        <RadzenImage Path="@_physician.PhotoUrl" />
                    </p>
                    <p>
                        <InputFile OnChange="HandleFileSelected" />
                    </p>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-3">
                            <RadzenLabel Text="Name:" />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="width: 100%;" Name="PhysicianFirstNameAndLastName" @bind-Value="@_physician.FirstNameAndLastName" Disabled="true" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-3">
                            <RadzenLabel Text="Specialization:" />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox style="width: 100%;" Name="Specialization" @bind-Value="@_physician.Specialization" />
                        </div>
                    </div>
                    <p>
                        <div class="row justify-content-center">
                            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                                <RadzenButton type="submit" style="margin: 0 1rem 1rem 0; width: 200px" Icon="save" Text="Save" ButtonStyle="ButtonStyle.Info" Click="@(async (args) => await SaveProfileAsync())" />
                            </div>
                        </div>
                    </p>
                </div>
            </div>
        </RadzenFieldset>

    </Authorized>
    <NotAuthorized>
        <p>
            <b>Please authenticate first.</b>
        </p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private PhysicianProfileUpdate _physicianProfileUpdate = new();
    private bool _isProfileLoaded;
    private bool _isLoadingProfile = true;
    private PhysicianProfile _physician = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await DisplayProfileAsync();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs files)
    {
        var resizedImage = await files.File.RequestImageFileAsync("image/jpg", 200, 200);
        _physicianProfileUpdate.ProfilePictureFile = resizedImage.OpenReadStream();
        _physicianProfileUpdate.ProfilePictureFileName = files.File.Name;
    }

    private async Task DisplayProfileAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _physicianProfileUpdate.Specialization = _physician.Specialization;
            var response = await PhysicianAPI.GetPhysicianProfileAsync();
            var responseBodyAsString = await response.Content.ReadAsStringAsync();
            var serializationOptions = new JsonSerializerOptions()
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                };
            if (response.IsSuccessStatusCode)
            {

                _physician = JsonSerializer
                                       .Deserialize<PhysicianProfile>(responseBodyAsString,
                                                               serializationOptions);
            }
            _isProfileLoaded = true;
            _isLoadingProfile = false;
            StateHasChanged();
        }
    }

    private async Task SaveProfileAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _physicianProfileUpdate.Specialization = _physician.Specialization;
            if (_physicianProfileUpdate.Specialization == null)
            {
                var confirmation = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Please provide specialization",
                        Detail = "",
                        Duration = 4000
                    };
                NotificationService.Notify(confirmation);
            }
            else
            {
                _isProfileLoaded = false;
                _isLoadingProfile = true;
                var response = await PhysicianAPI.UpdatePhysicianProfileAsync(_physicianProfileUpdate);
                _isProfileLoaded = true;
                _isLoadingProfile = false;
                var responseBodyAsString = await response.Content.ReadAsStringAsync();
                var serializationOptions = new JsonSerializerOptions()
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                    };

                if (response.IsSuccessStatusCode)
                {

                    _physician = JsonSerializer
                                           .Deserialize<PhysicianProfile>(responseBodyAsString,
                                                                   serializationOptions);
                    StateHasChanged();
                    var confirmation = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Profile successfully saved",
                            Detail = "",
                            Duration = 4000
                        };
                    NotificationService.Notify(confirmation);
                }

                else
                {
                    var errorMessage = JsonSerializer.Deserialize<OperationError>(responseBodyAsString,
                                                                   serializationOptions);
                    var error = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "An error has occurred",
                            Detail = errorMessage.Details,
                            Duration = 4000
                        };
                    NotificationService.Notify(error);
                }
            }
        }
    }
}
