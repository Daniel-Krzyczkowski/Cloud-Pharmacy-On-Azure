@page "/medicaments"
@using CloudPharmacy.PharmacyStore.WebApp.Application.Model
@using System.Text.Json
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CloudPharmacy.PharmacyStore.WebApp.Infrastructure.API.IPharmacyStoreAPI PharmacyStoreAPI

<RadzenDialog />
<RadzenNotification />
<PageTitle>Medicaments</PageTitle>

<AuthorizeView>
    <Authorized>

        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                        Data="@_medicaments" TItem="Medicament" ColumnWidth="140px" LogicalFilterOperator="LogicalFilterOperator.Or" IsLoading="@_isLoadingMedicaments">
            <Columns>
                <RadzenDataGridColumn TItem="Medicament" Title="Photo" Sortable="false" Filterable="false" Width="200px">
                    <Template Context="data">
                        <RadzenImage Path="@data.PictureUrl" style="width: 100px; height: 100px; border-radius: 8px; aspect-ratio:initial" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Medicament" Property="Name" Title="Name" />
                <RadzenDataGridColumn TItem="Medicament" Property="Producer" Title="Producer" />
                <RadzenDataGridColumn TItem="Medicament" Property="Price" Title="Price (PLN)" />
                <RadzenDataGridColumn TItem="Medicament" Property="" Title="">
                    <Template Context="data">
                        <RadzenButton style="margin: 0 1rem 1rem 0; width: 200px" Icon="launch" Click=@(async() => await DisplayMedicamentDetails(@data)) Text="Buy" ButtonStyle="ButtonStyle.Info" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </Authorized>
    <NotAuthorized>
        <p>
            <b>Please authenticate first.</b>
        </p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IList<Medicament> _medicaments = new List<Medicament>();

    private bool _isLoadingMedicaments = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadAllMedicamentsAsync();
    }
    private async Task LoadAllMedicamentsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var response = await PharmacyStoreAPI.GetMedicamentsAsync();
            var responseBodyAsString = await response.Content.ReadAsStringAsync();
            _isLoadingMedicaments = false;
            var serializationOptions = new JsonSerializerOptions()
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                };

            if (response.IsSuccessStatusCode)
            {

                _medicaments = JsonSerializer
                                       .Deserialize<IList<Medicament>>(responseBodyAsString,
                                                               serializationOptions);
                StateHasChanged();
            }

            else
            {
                var errorMessage = JsonSerializer.Deserialize<OperationError>(responseBodyAsString,
                                                               serializationOptions);
                var error = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "An error has occurred",
                        Detail = errorMessage.Details,
                        Duration = 4000
                    };
                NotificationService.Notify(error);
            }
        }
    }

    private async Task DisplayMedicamentDetails(Medicament medicament)
    {
        var purchaseCompleted = await DialogService.OpenAsync<MedicamentPurchase>("",
               new Dictionary<string, object>() { { "Medicament", medicament } },
               new DialogOptions() { Width = "700px", Height = "530px", Resizable = true, Draggable = true });

        if (purchaseCompleted)
        {
            var confirmation = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Medicament successfully purchased", Detail = "", Duration = 4000 };
            NotificationService.Notify(confirmation);
        }
    }
}
